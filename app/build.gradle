println "canRunAlone=${canRunAlone}"

if (canRunAlone.toBoolean()) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]
    useLibrary 'org.apache.http.legacy'

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        if (canRunAlone.toBoolean()) {
            applicationId "com.afirez.app"
        }
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner rootProject.ext.android["AndroidJUnitRunner"]

//        javaCompileOptions {
//            annotationProcessorOptions {
//                arguments = [moduleName: project.getName()]
//            }
//        }
    }

    sourceSets {
        main {
            if (canRunAlone.toBoolean()) {
                manifest.srcFile 'src/main/debug/AndroidManifest.xml'
                java
            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
            }
        }
    }

    buildTypes {
        debug {
            buildConfigField "boolean", "LOG_DEBUG", "true"
            buildConfigField "boolean", "USE_CANARY", "true"
            buildConfigField "boolean", "CAN_RUN_ALONE", "${canRunAlone}"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            buildConfigField "boolean", "LOG_DEBUG", "false"
            buildConfigField "boolean", "USE_CANARY", "false"
            buildConfigField "boolean", "CAN_RUN_ALONE", "${canRunAlone}"
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        disable 'InvalidPackage'
        disable "ResourceType"
        abortOnError false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation rootProject.ext.dependencies["appcompat-v7"]
    implementation rootProject.ext.dependencies["constraint-layout"]

    implementation rootProject.ext.dependencies["rxjava2"]
    implementation rootProject.ext.dependencies["rxandroid2"]
    implementation rootProject.ext.dependencies["retrofit"]
    implementation rootProject.ext.dependencies["retrofit-adapter-rxjava2"]
    implementation rootProject.ext.dependencies["retrofit-converter-gson"]
    implementation rootProject.ext.dependencies["rxcache-jolyglot-gson"]
    implementation rootProject.ext.dependencies["rxcache2"]
    implementation rootProject.ext.dependencies["okhttp-logging-interceptor"]

    testImplementation rootProject.ext.dependencies["junit"]
    androidTestImplementation(rootProject.ext.dependencies["espresso-core"], {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
}

task helloWorld(type: GreetingTask) {
    doFirst {
        println "do First helloWorld"
        def list = getActions()
        for (int i = 0; i < list.size(); i++) {
            println list.get(i).displayName
        }
    }

    doLast {
        println "do Last helloWorld"
    }

    println "Hello World"
}

task greeting(type: GreetingTask) {

    greeting = 'greetings from GreetingTask'

    doFirst {
        println "do First greeting"
    }

    doLast {
        println "do Last greeting"
    }
}

class GreetingTask extends  DefaultTask {
    String greeting = 'hello from GreetingTask'

    @TaskAction
    def greet() {
        println greeting
    }
}

task installAndRun(dependsOn: 'assembleDebug') {
    doFirst {
        exec {
            workingDir "${buildDir}/outputs/apk/debug"
            commandLine 'adb', 'install', '-r', 'app-debug.apk'
        }
        exec {
            def path = "${buildDir}/intermediates/manifests/full/debug/AndroidManifest.xml"
            // xml 解析
            def parser = new XmlParser(false, false).parse(new File(path))
            // application 下的每一个 activity 结点
            parser.application.activity.each { activity ->
                // activity 下的每一个 intent-filter 结点
                activity.'intent-filter'.each { filter ->
                    // intent-filter 下的 action 结点中的 @android:name 包含 android.intent.action.MAIN
                    if (filter.action.@"android:name".contains("android.intent.action.MAIN")) {
                        def targetActivity = activity.@"android:name"
                        commandLine 'adb', 'shell', 'am', 'start', '-n',
                                "${android.defaultConfig.applicationId}/${targetActivity}"
                    }
                }
            }
        }
    }
}

task showInstallDepends {
    doFirst {
        println project.tasks.findByName("installDebug").dependsOn
    }
}